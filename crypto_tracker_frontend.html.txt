<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Krypto-Transaktionsverfolger</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <style>
        :root {
            --primary-color: #f2a900;
            --secondary-color: #00ffbd;
            --background-color: #f5f5f5;
            --text-color: #333;
            --border-color: #ddd;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: var(--background-color);
            color: var(--text-color);
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .header {
            text-align: center;
            margin-bottom: 20px;
        }
        
        .controls {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            padding: 15px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .info-panel {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .info-card {
            background-color: white;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .info-card h3 {
            margin-top: 0;
            color: var(--primary-color);
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 10px;
        }
        
        .visualization {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 20px;
            margin-top: 20px;
            height: 500px;
            position: relative;
        }
        
        .transaction-item {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid var(--border-color);
        }

        .transaction-item:last-child {
            border-bottom: none;
        }
        
        .transaction-value {
            font-weight: bold;
        }
        
        .value-btc {
            color: #f2a900;
        }
        
        .value-eth {
            color: #627eea;
        }
        
        .value-sol {
            color: #00ffbd;
        }
        
        #transactionTree {
            width: 100%;
            height: 100%;
        }
        
        .node {
            cursor: pointer;
        }
        
        .node circle {
            fill: var(--primary-color);
            stroke: white;
            stroke-width: 1.5px;
        }
        
        .node text {
            font: 12px sans-serif;
        }
        
        .link {
            fill: none;
            stroke: #ccc;
            stroke-width: 1.5px;
        }

        .error-message {
            color: red;
            text-align: center;
            padding: 20px;
        }

        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100%;
        }

        .loading::after {
            content: "";
            width: 50px;
            height: 50px;
            border: 5px solid #ddd;
            border-top-color: var(--primary-color);
            border-radius: 50%;
            animation: loading 1s ease-in-out infinite;
        }

        @keyframes loading {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Krypto-Transaktionsverfolger</h1>
            <p>Verfolge den Verlauf von Kryptowährungen (ETH, BTC, SOL) ab einer definierten Transaktion</p>
        </div>
        
        <div class="controls">
            <div>
                <label for="startTx">Starttransaktion:</label>
                <input type="text" id="startTx" placeholder="Transaktions-Hash eingeben" style="width: 350px;">
            </div>
            <div>
                <label for="targetCurrency">Zielwährung:</label>
                <select id="targetCurrency">
                    <option value="BTC">BTC</option>
                    <option value="ETH">ETH</option>
                    <option value="SOL" selected>SOL</option>
                </select>
            </div>
            <div>
                <label for="numTransactions">Anzahl Transaktionen:</label>
                <input type="number" id="numTransactions" min="1" max="100" value="10">
            </div>
            <button id="trackButton">Transaktionen verfolgen</button>
        </div>
        
        <div class="info-panel">
            <div class="info-card">
                <h3>Start-Informationen</h3>
                <div id="startInfo">
                    <div class="transaction-item">
                        <span>Währung:</span>
                        <span id="sourceCurrency" class="transaction-value">-</span>
                    </div>
                    <div class="transaction-item">
                        <span>Hash:</span>
                        <span id="startHash" class="transaction-value" style="word-break: break-all; font-size: 0.9em;">-</span>
                    </div>
                    <div class="transaction-item">
                        <span>Zeitstempel:</span>
                        <span id="startTime" class="transaction-value">-</span>
                    </div>
                </div>
            </div>
            <div class="info-card">
                <h3>Transaktionsstatistik</h3>
                <div id="txStats">
                    <div class="transaction-item">
                        <span>Anzahl verfolgt:</span>
                        <span id="txCount" class="transaction-value">-</span>
                    </div>
                    <div class="transaction-item">
                        <span>Gesamtwert:</span>
                        <span id="totalValue" class="transaction-value">-</span>
                    </div>
                    <div class="transaction-item">
                        <span>Gesamtgebühren:</span>
                        <span id="totalFees" class="transaction-value">-</span>
                    </div>
                </div>
            </div>
            <div class="info-card">
                <h3>Konvertierung</h3>
                <div id="conversionInfo">
                    <div class="transaction-item">
                        <span>Zielwährung:</span>
                        <span id="targetCurrencyDisplay" class="transaction-value">-</span>
                    </div>
                    <div class="transaction-item">
                        <span>Wechselkurs:</span>
                        <span id="exchangeRate" class="transaction-value">-</span>
                    </div>
                    <div class="transaction-item">
                        <span>Wert in Zielwährung:</span>
                        <span id="convertedValue" class="transaction-value">-</span>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="visualization">
            <!-- Hier wird das Transaktions-Diagramm angezeigt -->
            <div id="transactionTree" class="loading"></div>
        </div>
    </div>

    <script>
        /**
         * Krypto-Transaktionsverfolger - Frontend-Script
         * ==============================================
         * Dieses Script visualisiert Kryptowährungs-Transaktionsdaten, die vom Backend
         * bereitgestellt werden, in Form eines Baumdiagramms entsprechend der bereitgestellten Skizze.
         */
        
        // Konfigurationsdaten laden
        async function loadConfig() {
            try {
                const response = await fetch('crypto_config.json');
                if (!response.ok) {
                    throw new Error('Konfiguration konnte nicht geladen werden');
                }
                return await response.json();
            } catch (error) {
                console.error('Fehler beim Laden der Konfiguration:', error);
                showError('Konfigurationsdatei konnte nicht geladen werden.');
                return null;
            }
        }

        // Elemente initialisieren
        function initializeUI(config) {
            if (!config) return;
            
            // Formularfelder mit Konfigurationswerten befüllen
            document.getElementById('startTx').value = config.startTransaction || '';
            document.getElementById('targetCurrency').value = config.targetCurrency || 'SOL';
            document.getElementById('numTransactions').value = config.numTransactions || 10;
            
            // UI-Farben anpassen
            if (config.visualization) {
                document.documentElement.style.setProperty('--primary-color', config.visualization.colorPrimary || '#f2a900');
                document.documentElement.style.setProperty('--secondary-color', config.visualization.colorSecondary || '#00ffbd');
            }
            
            // Event-Listener für den Track-Button hinzufügen
            document.getElementById('trackButton').addEventListener('click', trackTransactions);
            
            // Automatisches Tracking bei Konfiguration mit refreshInterval
            if (config.refreshInterval > 0) {
                setInterval(trackTransactions, config.refreshInterval * 1000);
            }
        }

        // Transaktionen vom Backend abrufen
        async function fetchTransactions(startTx, targetCurrency, numTransactions, config) {
            showLoading();
            
            try {
                // In einer echten Implementierung würde hier die Backend-API aufgerufen werden
                // Für diese Demo verwenden wir simulierte Daten, die der Struktur entsprechen
                
                // In einer Produktionsumgebung würde hier ein POST-Request an das Backend gesendet:
                /*
                const response = await fetch(config.apiEndpoint, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        startTransaction: startTx,
                        targetCurrency: targetCurrency,
                        numTransactions: numTransactions
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`Fehler beim Abrufen der Transaktionsdaten: ${response.status}`);
                }
                
                return await response.json();
                */
                
                // Für diese Demo generieren wir Beispieldaten, die der Skizze entsprechen
                return generateSampleData(startTx, targetCurrency, numTransactions);
                
            } catch (error) {
                console.error('Fehler beim Abrufen der Transaktionsdaten:', error);
                showError('Transaktionsdaten konnten nicht abgerufen werden.');
                return null;
            }
        }

        // Beispieldaten generieren (für Demo-Zwecke)
        function generateSampleData(startTx, targetCurrency, numTransactions) {
            // Basierend auf der Skizze: 1 BTC wird in mehrere 0.1 BTC-Transaktionen aufgeteilt
            const transactions = [];
            const startTimestamp = Math.floor(Date.now() / 1000) - 86400; // 1 Tag zurück
            
            // Starttransaktion
            const mainTx = {
                hash: startTx,
                currency: "BTC",
                timestamp: startTimestamp,
                fee: 0.0005,
                direction: "out",
                inputs: [
                    {
                        address: "bc1q..." + Math.random().toString(36).substring(2, 8),
                        value: 1.0,
                        value_converted: targetCurrency === "SOL" ? 500.0 : (targetCurrency === "ETH" ? 15.5 : 1.0)
                    }
                ],
                outputs: []
            };
            
            // 10 Output-Transaktionen mit je 0.1 BTC erstellen (entsprechend der Skizze)
            for (let i = 0; i < 10; i++) {
                mainTx.outputs.push({
                    address: "bc1q..." + Math.random().toString(36).substring(2, 8),
                    value: 0.1,
                    value_converted: targetCurrency === "SOL" ? 50.0 : (targetCurrency === "ETH" ? 1.55 : 0.1)
                });
            }
            
            transactions.push(mainTx);
            
            // Ergebnisstruktur zusammenstellen
            return {
                start_transaction: startTx,
                source_currency: "BTC",
                target_currency: targetCurrency,
                transactions_count: transactions.length,
                transactions: transactions,
                tracking_timestamp: Math.floor(Date.now() / 1000)
            };
        }

        // Transaktionsdaten visualisieren
        function visualizeTransactions(data) {
            if (!data || !data.transactions || data.transactions.length === 0) {
                showError('Keine Transaktionsdaten verfügbar.');
                return;
            }
            
            // Infopanels aktualisieren
            updateInfoPanels(data);
            
            // Transaktionsbaum erstellen (basierend auf der Skizze)
            createTransactionTree(data);
        }

        // Infopanels mit Daten befüllen
        function updateInfoPanels(data) {
            // Start-Informationen
            document.getElementById('sourceCurrency').textContent = data.source_currency || '-';
            document.getElementById('sourceCurrency').className = 'transaction-value value-' + (data.source_currency || '').toLowerCase();
            document.getElementById('startHash').textContent = data.start_transaction || '-';
            
            const startTime = data.transactions && data.transactions[0] ? 
                new Date(data.transactions[0].timestamp * 1000).toLocaleString() : '-';
            document.getElementById('startTime').textContent = startTime;
            
            // Transaktionsstatistik
            document.getElementById('txCount').textContent = data.transactions_count || 0;
            
            let totalValue = 0;
            let totalFees = 0;
            
            if (data.transactions && data.transactions.length > 0) {
                // Bei BTC-Transaktion: Input-Summe als Gesamtwert
                if (data.transactions[0].currency === 'BTC') {
                    totalValue = data.transactions[0].inputs.reduce((sum, input) => sum + input.value, 0);
                }
                
                // Gebühren summieren
                totalFees = data.transactions.reduce((sum, tx) => sum + (tx.fee || 0), 0);
            }
            
            document.getElementById('totalValue').textContent = 
                `${totalValue.toFixed(8)} ${data.source_currency}`;
            document.getElementById('totalValue').className = 
                `transaction-value value-${(data.source_currency || '').toLowerCase()}`;
                
            document.getElementById('totalFees').textContent = 
                `${totalFees.toFixed(8)} ${data.source_currency}`;
            document.getElementById('totalFees').className = 
                `transaction-value value-${(data.source_currency || '').toLowerCase()}`;
            
            // Konvertierungsinformationen
            document.getElementById('targetCurrencyDisplay').textContent = data.target_currency || '-';
            document.getElementById('targetCurrencyDisplay').className = 
                `transaction-value value-${(data.target_currency || '').toLowerCase()}`;
            
            // Wechselkurs berechnen (vereinfacht)
            let exchangeRate = 1.0;
            if (data.transactions && data.transactions[0] && data.transactions[0].inputs[0]) {
                const input = data.transactions[0].inputs[0];
                if (input.value > 0 && input.value_converted) {
                    exchangeRate = input.value_converted / input.value;
                }
            }
            
            document.getElementById('exchangeRate').textContent = 
                `1 ${data.source_currency} = ${exchangeRate.toFixed(4)} ${data.target_currency}`;
                
            const convertedValue = totalValue * exchangeRate;
            document.getElementById('convertedValue').textContent = 
                `${convertedValue.toFixed(4)} ${data.target_currency}`;
            document.getElementById('convertedValue').className = 
                `transaction-value value-${(data.target_currency || '').toLowerCase()}`;
        }

        // Transaktionsbaum erstellen (entsprechend der Skizze)
        function createTransactionTree(data) {
            const container = document.getElementById('transactionTree');
            container.innerHTML = ''; // Container leeren
            container.classList.remove('loading');
            
            if (!data.transactions || data.transactions.length === 0) {
                return;
            }
            
            // In einer vollständigen Implementierung würde hier ein D3.js-Baum erstellt werden
            // Für diese Demo erstellen wir ein einfaches HTML-basiertes Baum-Layout
            
            // Basierend auf der Skizze: 1 BTC -> mehrere 0.1 BTC-Nodes
            const mainTx = data.transactions[0];
            
            if (mainTx.currency === 'BTC' && mainTx.outputs && mainTx.outputs.length > 0) {
                // Zeige 1 BTC (links) -> mehrere 0.1 BTC-Werte (rechts) entsprechend der Skizze
                const svgContent = createSVGTreeFromBTCTransaction(mainTx, data.target_currency);
                container.innerHTML = svgContent;
            }
        }

        // Erstellt eine SVG-Darstellung eines BTC-Transaktionsbaums
        function createSVGTreeFromBTCTransaction(tx, targetCurrency) {
            const svgWidth = 800;
            const svgHeight = 500;
            const marginLeft = 100;
            const marginRight = 100;
            
            // SVG-Header erstellen
            let svg = `<svg width="${svgWidth}" height="${svgHeight}" xmlns="http://www.w3.org/2000/svg">`;
            
            // Farbdefinitionen
            svg += `
                <defs>
                    <linearGradient id="btcGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                        <stop offset="0%" style="stop-color:#f2a900;stop-opacity:1" />
                        <stop offset="100%" style="stop-color:#f2a900;stop-opacity:0.7" />
                    </linearGradient>
                </defs>
            `;
            
            // Startpunkt (1 BTC links)
            const inputValue = tx.inputs[0]?.value || 1.0;
            const centerY = svgHeight / 2;
            const startX = marginLeft;
            const endX = svgWidth - marginRight;
            
            // Zeichne Start-Knoten (BTC)
            svg += `
                <g class="node">
                    <circle cx="${startX}" cy="${centerY}" r="40" fill="url(#btcGradient)" />
                    <text x="${startX}" y="${centerY - 5}" text-anchor="middle" fill="white" style="font-weight: bold;">1 BTC</text>
                    <text x="${startX}" y="${centerY + 15}" text-anchor="middle" fill="white" style="font-size: 10px;">Start</text>
                </g>
            `;
            
            // Ausgabe-Knoten zeichnen (basierend auf der Skizze)
            const outputs = tx.outputs || [];
            const outputCount = outputs.length || 10; // Fallback auf 10 Outputs wie in der Skizze
            const verticalSpacing = svgHeight / (outputCount + 1);
            
            for (let i = 0; i < outputCount; i++) {
                const output = outputs[i] || { value: 0.1 }; // Fallback auf 0.1, wenn kein Output definiert
                const yPos = (i + 1) * verticalSpacing;
                
                // Linie vom Start-Knoten zum Output-Knoten zeichnen
                svg += `
                    <path d="M ${startX + 40} ${centerY} C ${(startX + endX) / 2} ${centerY}, ${(startX + endX) / 2} ${yPos}, ${endX - 30} ${yPos}" 
                          stroke="#ccc" stroke-width="2" fill="none" />
                `;
                
                // Output-Knoten zeichnen
                svg += `
                    <g class="node">
                        <circle cx="${endX}" cy="${yPos}" r="25" fill="#f2a900" />
                        <text x="${endX}" y="${yPos - 5}" text-anchor="middle" fill="white" style="font-size: 12px;">0.1</text>
                        <text x="${endX}" y="${yPos + 10}" text-anchor="middle" fill="white" style="font-size: 9px;">BTC</text>
                    </g>
                `;
                
                // SOL-Text auf der rechten Seite (entsprechend der Skizze)
                if (i === 0) {
                    svg += `
                        <text x="${endX + 40}" y="${yPos}" text-anchor="start" fill="#333" style="font-size: 14px;">${targetCurrency}</text>
                    `;
                } else if (i === 1) {
                    svg += `
                        <text x="${endX + 40}" y="${yPos}" text-anchor="start" fill="#333" style="font-size: 14px;">etc.</text>
                    `;
                }
            }
            
            // SVG abschließen
            svg += '</svg>';
            
            return svg;
        }

        // Lade-Animation anzeigen
        function showLoading() {
            const container = document.getElementById('transactionTree');
            container.innerHTML = '';
            container.className = 'loading';
        }

        // Fehlermeldung anzeigen
        function showError(message) {
            const container = document.getElementById('transactionTree');
            container.classList.remove('loading');
            container.innerHTML = `<div class="error-message">${message}</div>`;
        }

        // Transaktionen verfolgen (Hauptfunktion)
        async function trackTransactions() {
            const startTx = document.getElementById('startTx').value;
            const targetCurrency = document.getElementById('targetCurrency').value;
            const numTransactions = parseInt(document.getElementById('numTransactions').value, 10);
            
            if (!startTx) {
                showError('Bitte geben Sie eine Starttransaktion ein.');
                return;
            }
            
            const config = await loadConfig();
            const data = await fetchTransactions(startTx, targetCurrency, numTransactions, config);
            
            if (data) {
                visualizeTransactions(data);
            }
        }

        // Initialisierung beim Laden der Seite
        window.addEventListener('DOMContentLoaded', async () => {
            const config = await loadConfig();
            initializeUI(config);
            
            // Automatisches erstes Laden, wenn eine Starttransaktion konfiguriert ist
            if (config && config.startTransaction) {
                trackTransactions();
            } else {
                document.getElementById('transactionTree').classList.remove('loading');
            }
        });
    </script>
</body>
</html>
